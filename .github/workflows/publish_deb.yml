name: Codewithwest admin deb package

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker image
        run: docker pull ghcr.io/codewithwest/project_codewithwest-admin/codewithwest-flutter:3.29.0

      - name: Run build in Docker container
        run: |
          docker run --rm \
          -v "$(pwd):/app" \
          ghcr.io/codewithwest/project_codewithwest-admin/codewithwest-flutter:3.29.0 \
          /bin/bash -c "export PATH=\"\$PATH\":\"\$HOME/.pub-cache/bin\" && cd /app && flutter pub get && dart pub global activate flutter_distributor && flutter_distributor release --name=prod --jobs=release-prod-linux-deb"

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: codewithwest-admin
          path: dist/*/*.deb


  release:
    needs: build
    runs-on: ubuntu-latest
  
    steps:
      - name: Download Debian package
        uses: actions/download-artifact@v4
        with:
          name: codewithwest-admin
          path: dist/
  
      - name: List downloaded files
        run: ls -la dist/
  
      - name: Get package name
        id: get_package_name
        run: |
          PACKAGE_NAME_LOCATION=$(find . -name "*codewithwest-admin*.deb" -print -quit)
          if [[ -n "$PACKAGE_NAME_LOCATION" ]]; then
            PACKAGE_NAME=$(basename "$PACKAGE_NAME_LOCATION")
            echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          else
            echo "No matching package found."
            exit 1 # Exit with an error code if no package is found.
          fi
  
      - name: Attach to Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs').promises;
            const artifactPath = `./${{ steps.get_package_name.outputs.PACKAGE_NAME }}`;
            const artifactContent = await fs.readFile(artifactPath);
  
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              name: '${{ steps.get_package_name.outputs.PACKAGE_NAME }}',
              data: artifactContent,
            });
